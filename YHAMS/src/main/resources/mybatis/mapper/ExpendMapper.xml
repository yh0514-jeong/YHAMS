<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yhams.expend.ExpendMapper">

	<sql id="DepWithdralCondition">

	   WHERE TMP.USER_SEQ = #{USER_SEQ}
	   
	   <if test="START_DATE != null and START_DATE != ''">
	   	  AND  TMP.ACT_DATE <![CDATA[ >= ]]>  STR_TO_DATE(#{START_DATE},'%Y-%m-%d')
	   </if>  
	   
	   <if test="END_DATE != null and END_DATE != ''">
	   	  AND  TMP.ACT_DATE <![CDATA[ <= ]]>  STR_TO_DATE(#{END_DATE},'%Y-%m-%d')
	   </if>
	   
	   <if test="DESCRIPT != null and DESCRIPT != ''">
	   	  AND   TMP.DESCRIPT LIKE CONCAT('%',#{DESCRIPT},'%')
	   </if>
	   
	   <if test="DW_CATE != null and DW_CATE != ''">
	     AND   (TMP.DW_CATE1_NM LIKE CONCAT('%',#{DW_CATE},'%') OR TMP.DW_CATE2_NM LIKE CONCAT('%',#{DW_CATE},'%') )
	   </if>
	
	</sql>
	
	<sql id="DailyExpendPlanCondition">
	
		  WHERE X.USER_SEQ          = #{USER_SEQ}
		  <if test="STD_YEAR_MONTH != null and STD_YEAR_MONTH != ''">
		  	AND   X.STD_YEAR_MONTH  = #{STD_YEAR_MONTH}
		  </if>
		  
	</sql>	
	
	

	<select id="getAccountList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
	
		SELECT  ACCOUNT_CD,
		        ACCOUNT_NM
		   
		   FROM TB_META_ACCOUNT
		   WHERE USER_SEQ = #{USER_SEQ}
		   AND   USE_YN   = 'Y'
			
		   ORDER BY ACCOUNT_CD ASC
	
	</select>
	
	
	<insert id="saveDepWithdralList" parameterType="java.util.HashMap">
	
			INSERT INTO TB_TRAN_ACCT_SMR (
			
					ACT_SEQ,
					USER_SEQ,
					ACCOUNT_CD,
					ACT_DATE,
					DEPOSIT_TOTAL,
					WITHDRL_TOTAL,
					DESCRIPT,
					DW_CATE1,
					DW_CATE2,
					CREATE_ID,
					CREATE_DATE,
					UPDATE_ID,
					UPDATE_DATE
				
				) VALUES (
				
					#{ACT_SEQ},
					#{USER_SEQ},
					#{ACCOUNT_CD},
					#{ACT_DATE},
					#{DEPOSIT_TOTAL},
					#{WITHDRL_TOTAL},
					#{DESCRIPT},
					#{DW_CATE1},
					#{DW_CATE2},
					#{CREATE_ID},
					NOW(),
					#{UPDATE_ID},
					NOW()
				
				)
	
	</insert>
	
	
	
	<select id="depWithdralList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
	
		SELECT   T1.RNUM,
		         T1.ACT_SEQ,
				 T1.ACCOUNT_NM,
				 DATE_FORMAT(T1.ACT_DATE, '%Y-%m-%d') AS ACT_DATE,
				 FORMAT(T1.DEPOSIT_TOTAL, 0) AS DEPOSIT_TOTAL,
		 		 FORMAT(T1.WITHDRL_TOTAL, 0) AS WITHDRL_TOTAL,
				 T1.DESCRIPT,
				 T1.DW_CATE1_NM, 
				 T1.DW_CATE2_NM
			
		  FROM (SELECT    ROW_NUMBER() OVER (ORDER BY TMP.ACT_DATE DESC) AS RNUM,
		  	 			  TMP.*
		  	      
		  	      FROM (SELECT   TTAS.ACT_SEQ,
								 TTAS.USER_SEQ,
								 TTAS.ACCOUNT_CD,
								 (SELECT TMA.ACCOUNT_NM
								 FROM TB_META_ACCOUNT TMA
								WHERE TTAS.ACCOUNT_CD = TMA.ACCOUNT_CD
								  ) AS ACCOUNT_NM,
								 TTAS.ACT_DATE,
								 TTAS.DEPOSIT_TOTAL,
								 TTAS.WITHDRL_TOTAL,
								 TTAS.DESCRIPT,
								 TTAS.DW_CATE1,
								 (SELECT CODE_NM
								    FROM TB_CMM_CDDTL TCC
							       WHERE TTAS.DW_CATE1 = TCC.CODE_CD		    
								 ) AS DW_CATE1_NM,
								 TTAS.DW_CATE2,
								 (SELECT CODE_NM
								    FROM TB_CMM_CDDTL TCC
							       WHERE TTAS.DW_CATE2 = TCC.CODE_CD		    
								 ) AS DW_CATE2_NM,
								 TTAS.CREATE_ID,
								 TTAS.CREATE_DATE,
								 TTAS.UPDATE_ID,
								 TTAS.UPDATE_DATE
									 
							FROM TB_TRAN_ACCT_SMR TTAS 

						 ) TMP
						
						<include refid="DepWithdralCondition"/>
						
				) T1
				
				WHERE T1.RNUM BETWEEN ((#{cntPerPage} * (#{curPage}-1)) + 1) AND (#{cntPerPage} * #{curPage})
	
	</select>
	
	
	<select id="depWithdralCount" parameterType="java.util.HashMap" resultType="long">
	
		SELECT  COUNT(*)
			
		  FROM (
		  		
		  		SELECT    ROW_NUMBER() OVER (ORDER BY TMP.ACT_DATE DESC) AS RNUM,
		  	 			  TMP.*
		  	      
		  	      FROM (SELECT   TTAS.ACT_SEQ,
								 TTAS.USER_SEQ,
								 TTAS.ACCOUNT_CD,
								 (SELECT TMA.ACCOUNT_NM
								 FROM TB_META_ACCOUNT TMA
								WHERE TTAS.ACCOUNT_CD = TMA.ACCOUNT_CD
								  ) AS ACCOUNT_NM,
								 TTAS.ACT_DATE,
								 TTAS.DEPOSIT_TOTAL,
								 TTAS.WITHDRL_TOTAL,
								 TTAS.DESCRIPT,
								 TTAS.DW_CATE1,
								 (SELECT CODE_NM
								    FROM TB_CMM_CDDTL TCC
							       WHERE TTAS.DW_CATE1 = TCC.CODE_CD		    
								 ) AS DW_CATE1_NM,
								 TTAS.DW_CATE2,
								 (SELECT CODE_NM
								    FROM TB_CMM_CDDTL TCC
							       WHERE TTAS.DW_CATE2 = TCC.CODE_CD		    
								 ) AS DW_CATE2_NM,
								 TTAS.CREATE_ID,
								 TTAS.CREATE_DATE,
								 TTAS.UPDATE_ID,
								 TTAS.UPDATE_DATE
									 
							FROM TB_TRAN_ACCT_SMR TTAS 

						 ) TMP
						
						<include refid="DepWithdralCondition"/>
						
				) T1
	
	</select>
	
	
	<delete id="deleteDepWithdrawalList" parameterType="java.util.HashMap">
	 
	 	DELETE FROM	TB_TRAN_ACCT_SMR
	 	WHERE ACT_SEQ IN 
	 	<foreach collection="actSeqs" item="item" separator="," open="(" close=")">
            #{item}
    	</foreach>
    	
	 </delete>
	 
	 
	 <select id="selecteDepWithdrawal" parameterType="String" resultType="java.util.HashMap">
	 
	 			
			SELECT  TTAS.ACT_SEQ,
			        TTAS.USER_SEQ,
			        TTAS.ACCOUNT_CD,
			        (SELECT TMA.ACCOUNT_NM
			           FROM TB_META_ACCOUNT TMA
			          WHERE TTAS.ACCOUNT_CD = TMA.ACCOUNT_CD
					  ) AS ACCOUNT_NM,
			        TTAS.ACT_DATE,
			        TTAS.DEPOSIT_TOTAL,
			        TTAS.WITHDRL_TOTAL,
			        TTAS.DESCRIPT,
			        TTAS.DW_CATE1,
			        TTAS.DW_CATE2
		        
			   FROM TB_TRAN_ACCT_SMR TTAS
			
			  WHERE ACT_SEQ = #{ACT_SEQ}
	 
	 </select>
	 
	 
	 <update id="updateDepWithdrawl" parameterType="java.util.HashMap">
	 
	 	UPDATE TB_TRAN_ACCT_SMR	
	 	
		   SET ACCOUNT_CD     = #{ACCOUNT_CD},
		       ACT_DATE       = #{ACT_DATE},
		       DEPOSIT_TOTAL  = #{DEPOSIT_TOTAL},
		       WITHDRL_TOTAL  = #{WITHDRL_TOTAL},
		       DESCRIPT       = #{DESCRIPT},
		       DW_CATE1       = #{DW_CATE1},
		       DW_CATE2       = #{DW_CATE2},
		       UPDATE_DATE    = NOW(),
		       UPDATE_ID      = #{UPDATE_ID}
		       
		WHERE ACT_SEQ         = #{ACT_SEQ}
	 
	 </update>
	 
	 
	 <select id="chkDupYearMonth" parameterType="java.util.HashMap" resultType="String">
	 
			SELECT  CASE WHEN COUNT(*)  <![CDATA[ > ]]> 0 THEN 'TRUE'
			        ELSE 'FALSE'
			        END AS RESULT
		      FROM  TB_TRAN_DAILY_EXP_PLAN
		      WHERE USER_SEQ       = #{USER_SEQ}
		      AND   STD_YEAR_MONTH = #{STD_YEAR_MONTH}
		      
	 </select>
	 
	 	
	 <select id="getExistYearlyPlanCountByStdYearAndStdMonth" parameterType="java.util.HashMap" resultType="long">
	 
		 SELECT   COUNT(*) AS CNT
		   FROM   TB_TRAN_YEARLY_ASSET_PLAN
		  WHERE   USER_SEQ  = #{USER_SEQ}
		    AND   STD_YEAR  = #{STD_YEAR}
			AND   STD_MONTH = #{STD_MONTH}
	 
	 </select>
	 
	 <select id="existYearlyPlanAmount" parameterType="java.util.HashMap" resultType="long">
	 
	 	SELECT  SUM(AMOUNT) AS SUM
		  FROM  TB_TRAN_YEARLY_ASSET_PLAN
		  WHERE USER_SEQ  = #{USER_SEQ}
		  AND   STD_YEAR  = #{STD_YEAR}
		  AND   STD_MONTH = #{STD_MONTH}
		  AND   SUB_CTG IN (
							SELECT  USER_DEF_SEQ
						      FROM  TB_META_USER_DEF_ICMEXP_CATEGORY
						     WHERE  USER_SEQ         = #{USER_SEQ}
						     
						     <if test="CATE == 'EXP'">
						      AND EXP_PLAN_CATE_YN = 'Y'
						     </if>
						     
						     <if test="CATE == 'ICM'">
						      AND ICM_PLAN_CATE_YN = 'Y'
						     </if>
						       
							)
	 
	 </select>
	 
	 
	 <select id="getDailyExpendPlanCount" parameterType="java.util.HashMap" resultType="long">
	 
	 		SELECT  COUNT(*) 
			  FROM  TB_TRAN_DAILY_EXP_PLAN
			 WHERE  USER_SEQ       = #{USER_SEQ}
			  AND   STD_YEAR_MONTH = #{STD_YEAR_MONTH}
	 
	 </select>
	 
	 
	 <insert id="saveDailyExpendPlanList" parameterType="java.util.HashMap">
	 
 			INSERT INTO TB_TRAN_DAILY_EXP_PLAN (
						
							EXP_PLAN_SEQ,
							USER_SEQ,
							STD_YEAR_MONTH,
							STD_DATE,
							AMOUNT,
							CREATE_ID,
							CREATE_DATE,
							UPDATE_ID,
							UPDATE_DATE
						
						
						) VALUES (
						
							#{EXP_PLAN_SEQ},
							#{USER_SEQ},
							#{STD_YEAR_MONTH},
							STR_TO_DATE(#{STD_DATE}, '%Y-%m-%d'),
							#{AMOUNT},
							#{CREATE_ID},
							NOW(),
							#{UPDATE_ID},
							NOW()
						
						)
	 
	 </insert>
	 
	 
	 <select id="dailyExpendPlanCount" parameterType="java.util.HashMap" resultType="long">
	 
	 	SELECT 	   COUNT(*) AS CNT

		FROM (	
	
				SELECT   X.USER_SEQ,
				         X.STD_YEAR_MONTH,
				         IFNULL(X.AMOUNT, 0) AS AMOUNT,
				         IFNULL(Y.WITHDRL_TOTAL, 0) AS WITHDRL_TOTAL
				       
				       
				  FROM ( SELECT  USER_SEQ,
						         STD_YEAR_MONTH,
						         SUM(AMOUNT) AS AMOUNT
						   FROM  TB_TRAN_DAILY_EXP_PLAN
						 GROUP BY USER_SEQ, STD_YEAR_MONTH
						) X
					
					
				  LEFT OUTER JOIN
				  
				  (SELECT     T1.USER_SEQ,
							  T1.ACT_DATE,
					          SUM(T1.WITHDRL_TOTAL) AS WITHDRL_TOTAL
					
					 FROM     (SELECT   CONCAT(YEAR(ACT_DATE), '-', LPAD(MONTH(ACT_DATE), 2, 0)) AS ACT_DATE,
								        WITHDRL_TOTAL,
								        USER_SEQ
								 
								 FROM   TB_TRAN_ACCT_SMR
								) T1
					  
					  GROUP BY T1.USER_SEQ, T1.ACT_DATE		
				   ) Y
					
				   ON  X.USER_SEQ       = Y.USER_SEQ
				   AND X.STD_YEAR_MONTH = Y.ACT_DATE
					
				   <include refid="DailyExpendPlanCondition"/>
		
			) Z
	 
	 </select>
	 
	 
	 
	 <select id="dailyExpendPlanList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
	 
	 	SELECT 	   Z.RNUM,
			       Z.USER_SEQ,
			       Z.STD_YEAR_MONTH,
			       FORMAT(Z.AMOUNT, 0) AS AMOUNT,
			       FORMAT(Z.WITHDRL_TOTAL,0) AS WITHDRL_TOTAL,
			       FORMAT(Z.AMOUNT-Z.WITHDRL_TOTAL, 0) AS DIF

		FROM (	
	
				SELECT   ROW_NUMBER() OVER (ORDER BY X.STD_YEAR_MONTH DESC) AS RNUM,
						 X.USER_SEQ,
				         X.STD_YEAR_MONTH,
				         IFNULL(X.AMOUNT, 0) AS AMOUNT,
				         IFNULL(Y.WITHDRL_TOTAL, 0) AS WITHDRL_TOTAL
				       
				       
				  FROM ( SELECT  USER_SEQ,
						         STD_YEAR_MONTH,
						         SUM(AMOUNT) AS AMOUNT
						   FROM  TB_TRAN_DAILY_EXP_PLAN
						 GROUP BY USER_SEQ, STD_YEAR_MONTH
						) X
					
					
				  LEFT OUTER JOIN
				  
				  (SELECT     T1.USER_SEQ,
							  T1.ACT_DATE,
					          SUM(T1.WITHDRL_TOTAL) AS WITHDRL_TOTAL
					
					 FROM     (SELECT   CONCAT(YEAR(ACT_DATE), '-', LPAD(MONTH(ACT_DATE), 2, 0)) AS ACT_DATE,
								        WITHDRL_TOTAL,
								        USER_SEQ
								 
								 FROM   TB_TRAN_ACCT_SMR
								) T1
					  
					  GROUP BY T1.USER_SEQ, T1.ACT_DATE		
				   ) Y
					
				   ON  X.USER_SEQ       = Y.USER_SEQ
				   AND X.STD_YEAR_MONTH = Y.ACT_DATE
					
				   <include refid="DailyExpendPlanCondition"/>
		
			) Z
			
			WHERE Z.RNUM BETWEEN ((#{cntPerPage} * (#{curPage}-1)) + 1) AND (#{cntPerPage} * #{curPage})
	 
	 </select>	
	 
	 
	 <select id="selectExpendPlanList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
	 
	 
	 	SET @AMOUNT  = 0;
		SET @WITHDRL = 0;	


		SELECT   Y.RNUM,
		         Y.USER_SEQ,
		         Y.STD_YEAR_MONTH,
		         Y.STD_DATE,
		         FORMAT(Y.AMOUNT, 0) AS AMOUNT,
		         FORMAT(@AMOUNT := @AMOUNT + Y.AMOUNT, 0)  AS CUM_AMOUNT,
		         FORMAT(Y.WITHDRL_TOTAL, 0) AS WITHDRL_TOTAL,
		         FORMAT(@WITHDRL := @WITHDRL + Y.WITHDRL_TOTAL, 0) AS CUM_WITHDRL_TOTAL,
		         FORMAT(@AMOUNT- @WITHDRL, 0) AS DIF
		
			FROM (
					SELECT   ROW_NUMBER() OVER (ORDER BY X.STD_DATE ASC) AS RNUM,
					         X.USER_SEQ,
					         X.STD_YEAR_MONTH,
					         X.STD_DATE,
					         X.AMOUNT,
					         X.WITHDRL_TOTAL
						  
					FROM (
							
							SELECT   TTDEP.USER_SEQ,
							         TTDEP.STD_YEAR_MONTH,
							         TTDEP.STD_DATE,
							         IFNULL(TTDEP.AMOUNT, 0) AS AMOUNT,
							         IFNULL(TTAS.WITHDRL_TOTAL, 0) AS WITHDRL_TOTAL			         
									         
							  FROM  (SELECT  USER_SEQ,
									         STD_YEAR_MONTH,
									         CONCAT(YEAR(STD_DATE), '-', LPAD(MONTH(STD_DATE), 2, 0), '-', LPAD(DAY(STD_DATE), 2, 0)) AS STD_DATE,
									         AMOUNT
									   
									   FROM  TB_TRAN_DAILY_EXP_PLAN 
    								 ) TTDEP
										
							 LEFT OUTER JOIN
										
									(SELECT  T1.USER_SEQ,
									         T1.ACT_DATE,
									         SUM(T1.WITHDRL_TOTAL) AS WITHDRL_TOTAL
									  
									   FROM ( SELECT  USER_SEQ,
									      	          CONCAT(YEAR(ACT_DATE), '-', LPAD(MONTH(ACT_DATE), 2, 0), '-', LPAD(DAY(ACT_DATE), 2, 0)) AS ACT_DATE,
											          WITHDRL_TOTAL
											    FROM  TB_TRAN_ACCT_SMR
											) T1
								     
								      GROUP BY T1.USER_SEQ, T1.ACT_DATE		
									 
									 ) TTAS
										
								ON   TTDEP.USER_SEQ  = TTAS.USER_SEQ
								AND  TTDEP.STD_DATE  = TTAS.ACT_DATE
								
								WHERE TTDEP.USER_SEQ       = #{USER_SEQ}
								AND   TTDEP.STD_YEAR_MONTH = #{STD_YEAR_MONTH}
										
					    ) X
			
				) Y
						
			ORDER BY Y.RNUM ASC;
	 
	 </select>
	 
	 	 
</mapper>